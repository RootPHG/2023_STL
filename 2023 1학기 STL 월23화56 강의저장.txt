


2023-03-07 13:28:39.5908334
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 6일  			월23화56				(1주 2)
//-----------------------------------------------------------------------
// 한학기 강의를 저장하는 코드 작성
//-----------------------------------------------------------------------
// 코딩환경
// VS Release/x64 latest
//-----------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <chrono>

void save(const std::string&);

//--------
int main()
//--------
{
	std::cout << "2023 STL" << '\n';

	save("소스.cpp");
}

void save(const std::string& fileName)
{
	// 읽기 모드로 fileName을 연다
	std::ifstream in{ fileName };			// RAII개념 

	// 저장할 파일을 덧붙여 쓰기 모드로 연다
	std::ofstream out{ "2023 1학기 STL 월23화56 강의저장.txt", std::ios::app };

	out << '\n' << '\n' << '\n';

	// 저장한 시간을 파일에 기록하자				// epoch - 1970 1월 1일 시작
	auto now = std::chrono::system_clock::now();				// 현재 time_point를 얻는다
	using namespace std::chrono_literals;
	out << now + 9h << '\n';

	// fileName을 읽어 저장할 파일에 쓴다
	// STL 자료구조와 알고리즘을 이용하여 작성
	std::vector<char> v{ std::istreambuf_iterator<char>{ in }, {} };			// istream_iterator - 공백 무시 // {} - 파일의 끝까지
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{ out });	// std::cout - 콘솔 입력, out - 메모장 입력
}




=================================================
소스.cpp2023-03-07 화요일 오후 1:52:27
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// 한학기 강의를 저장하는 코드 작성
//-----------------------------------------------------------------------
// 코딩환경
// VS Release/x64 C++표준 - latest, SDL - 아니요
//-----------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <chrono>

void save(const std::string&);

//--------
int main()
//--------
{
	std::cout << "2023 STL" << '\n';

	using namespace std::string_literals;
	save("소스.cpp"s);
}

void save(const std::string& fileName)
{
	// 읽기 모드로 fileName을 연다
	std::ifstream in{ fileName };			// RAII개념 

	// 저장할 파일을 덧붙여 쓰기 모드로 연다
	std::ofstream out{ "2023 1학기 STL 월23화56 강의저장.txt", std::ios::app };

	out << '\n' << '\n' << '\n';

	// 저장한 시간을 파일에 기록하자								// epoch - 1970 1월 1일 시작
	auto now = std::chrono::system_clock::now();					// 현재 time_point를 얻는다
	auto utc = std::chrono::system_clock::to_time_t(now);			// UTC 시간으로 변경
	auto lt = std::localtime(&utc);									// 지역시간으로 변경

	auto old = out.imbue(std::locale("ko_KR"));						// 대한민국으로 지역변경 
	out << "=================================================" << '\n';
	out << fileName << std::put_time(lt, "%x %A %X") << '\n';					// 한국시간으로 파일에 출력
	out << "=================================================" << '\n';
	out.imbue(old);													// 원래 지역으로 변경

	// fileName을 읽어 저장할 파일에 쓴다
	// STL 자료구조와 알고리즘을 이용하여 작성
	std::vector<char> v{ std::istreambuf_iterator<char>{ in }, {} };			// istream_iterator - 공백 무시 // {} - 파일의 끝까지
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{ out });	// std::cout - 콘솔 입력, out - 메모장 입력
}




=================================================
소스.cpp2023-03-07 화요일 오후 2:05:43
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// 한학기 강의를 저장하는 코드 작성, save() 파일로 분리
//-----------------------------------------------------------------------
// 코딩환경
// VS Release/x64 C++표준 - latest, SDL - 아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"



//--------
int main()
//--------
{
	std::cout << "2023 STL 강의할 준비가 되었다" << '\n';

	save("소스.cpp");
}






=================================================
소스.cpp2023-03-07 화요일 오후 2:06:59
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// 한학기 강의를 저장하는 코드 작성, save() 파일로 분리
//-----------------------------------------------------------------------
// 코딩환경
// VS Release/x64 C++표준 - latest, SDL - 아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "2023 STL 강의할 준비가 되었다" << '\n';

	save("소스.cpp");
	save("save.cpp");
	save("save.h");
}






=================================================
save.cpp2023-03-07 화요일 오후 2:06:59
=================================================
//-----------------------------------------------------------------------------
// save.h 한 학기 강의 저장하는 함수
//-----------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <chrono>
#include "save.h"

void save(const std::string& fileName)
{
	// 읽기 모드로 fileName을 연다
	std::ifstream in{ fileName };			// RAII개념 

	// 저장할 파일을 덧붙여 쓰기 모드로 연다
	std::ofstream out{ "2023 1학기 STL 월23화56 강의저장.txt", std::ios::app };

	out << '\n' << '\n' << '\n';

	// 저장한 시간을 파일에 기록하자								// epoch - 1970 1월 1일 시작
	auto now = std::chrono::system_clock::now();					// 현재 time_point를 얻는다
	auto utc = std::chrono::system_clock::to_time_t(now);			// UTC 시간으로 변경
	auto lt = std::localtime(&utc);									// 지역시간으로 변경

	auto old = out.imbue(std::locale("ko_KR"));						// 대한민국으로 지역변경 
	out << "=================================================" << '\n';
	out << fileName << std::put_time(lt, "%x %A %X") << '\n';					// 한국시간으로 파일에 출력
	out << "=================================================" << '\n';
	out.imbue(old);													// 원래 지역으로 변경

	// fileName을 읽어 저장할 파일에 쓴다
	// STL 자료구조와 알고리즘을 이용하여 작성
	std::vector<char> v{ std::istreambuf_iterator<char>{ in }, {} };			// istream_iterator - 공백 무시 // {} - 파일의 끝까지
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{ out });	// std::cout - 콘솔 입력, out - 메모장 입력
}


=================================================
save.h2023-03-07 화요일 오후 2:06:59
=================================================
//-----------------------------------------------------------------------------
// save.h 한 학기 강의 저장하는 함수
//-----------------------------------------------------------------------------

#ifndef MY_SAVE_FILE
#define MY_SAVE_FILE

void save(const std::string&);

#endif


=================================================
소스.cpp2023-03-07 화요일 오후 2:30:24
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// C++ 복습, template
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"


// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
void change(int& a, int& b);
//--------
int main()
//--------
{
	int a{ 1 }, b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;		// 2, 1
	save("소스.cpp");
}

void change(int& a, int& b)
{
	int i = a;
	a = b;
	b = i;
}




=================================================
소스.cpp2023-03-07 화요일 오후 3:00:54
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// C++ 복습, template
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"


// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
class Dog {
		int n;
	public:
		Dog(int n) : n{ n } {}
		friend std::ostream& operator <<(std::ostream& os, const Dog& dog) {
			return os << dog.n;
		}
};

void change(int& , int&);
void change(Dog& , Dog&);

//--------
int main()
//--------
{
	{
		Dog a = 1, b = 2;
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 2, 1
	}
	save("소스.cpp");
}

void change(int& a, int& b)
{
	int i{ a };
	a = b;
	b = i;
}

void change(Dog& a, Dog& b)
{
	Dog i{ a };
	a = b;
	b = i;
}


=================================================
소스.cpp2023-03-07 화요일 오후 3:04:24
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// C++ 복습, template
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"


// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
class Dog {
		int n;
	public:
		Dog(int n) : n{ n } {}
		friend std::ostream& operator <<(std::ostream& os, const Dog& dog) {
			return os << dog.n;
		}
};
template <class T>
void change(T& , T&);

//--------
int main()
//--------
{
	{
		Dog a = 1, b = 2;
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 2, 1
	}
	save("소스.cpp");
}

template <class T>
void change(T& a, T& b)
{
	T i{ a };
	a = b;
	b = i;
}




=================================================
소스.cpp2023-03-07 화요일 오후 3:06:28
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 7일  	화56		월23화56				(1주 2)
//-----------------------------------------------------------------------
// C++ 복습, template
//-----------------------------------------------------------------------
#include <iostream>

#include <algorithm>
#include "save.h"



// [문제] main()을 고치지 말고 의도대로 실행되게 하라.
class Dog {
		int n;
	public:
		Dog(int n) : n{ n } {}
		friend std::ostream& operator <<(std::ostream& os, const Dog& dog) {
			return os << dog.n;
		}
};
template <class T>
void change(T& , T&);

//--------
int main()
//--------
{
	{
		Dog a = 1, b = 2;
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 2, 1
	}

	{
		int a = 1, b = 2;
		change(a, b);
		std::cout << a << ", " << b << std::endl;		// 2, 1
	}
	save("소스.cpp");
}

template <class T>
void change(T& a, T& b)
{
	T i{ a };
	a = b;
	b = i;
}




=================================================
소스.cpp2023-03-13 월요일 오전 10:46:00
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>
#include <random>

#include "save.h"

// 랜덤 값을 갖는 int  1'000개를 생성하고 값을 화면에 출력한다
std::default_random_engine dre;

//--------
int main()
//--------
{
	std::uniform_int_distribution uid;

	for (int i = 0; i < 10; i++) {
		std::cout << uid(dre) << '\n';
	}
	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오전 11:07:04
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>

#include "save.h"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

//--------
int main()
//--------
{
	std::uniform_int_distribution uid{ 0, 9999 };

	int max = 0;

	for (int i = 0; i < 1'000; i++) {
		int a = uid(dre);
		std::cout << std::format( "{:^8}", a );
		if (max < a)
			max = a;
	}

	std::cout << max;

	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오전 11:09:22
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>

#include "save.h"

// [문제] 랜덤 int 1'000개 중 가장 큰 값을 찾아 화면에 출력하라
std::default_random_engine dre;

//--------
int main()
//--------
{
	std::uniform_int_distribution uid{ 0, 9999 };

	int max = std::numeric_limits<int>::min();						// 기준 - int값이 가질 수 있는 가장 작은 값

	for (int i = 0; i < 1'000; i++) {
		int num = uid(dre);
		std::cout << std::format( "{:^8}", num );

		if (max < num)
			max = num;
	}

	std::cout << "최대값 - " << max << std::endl;

	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오전 11:23:13
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>

#include <random>
#include <format>
#include <fstream>

#include "save.h"




// [문제] 파일 "int 천개"에 있는 int 100개를 메모리에 저장하라

std::default_random_engine dre;

//--------
int main()
//--------
{
	std::ofstream out{ "int 천개" };				// RAII

	std::uniform_int_distribution uid{ 0, 9999 };

	for (int i = 0; i < 1'000; i++) {
		int num = uid(dre);
		out << std::format( "{:8}", num );
		if (i % 8 == 0)
			out << "\n";

	}


	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오전 11:44:32
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <format>

#include "save.h"




// [문제] 파일 "int 천개"에 몇 개인지 모르는 int 를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다.


//--------
int main()
//--------
{
	std::ifstream in{ "int 천개" };				

	int num;

	while ( in >> num)	{
		std::cout << std::format("{:8}", num);
	}


	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오전 11:48:01
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <format>

#include "save.h"




// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다.


//--------
int main()
//--------
{
	std::ifstream in{ "int 천개" };				

	int num;

	for (int i = 0; i < 1'000; i++) {
		in >> num;
		std::cout << std::format("{:8}", num);
	}


	save("소스.cpp");
}







=================================================
소스.cpp2023-03-13 월요일 오후 12:06:09
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <format>
#include <array>

#include "save.h"




// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다.


//--------
int main()
//--------
{
	std::ifstream in{ "int 천개" };				

	std::array<int, 1000> a;			// 앞으로 int[] 사용하지 않는다

	for (int i = 0; i < 1000; i++)
		in >> a[i];

	// int a[]에 있는 값 중 가장 큰 값을 화면에 출력하라.

	int max = a[0];

	for (int num : a) {
		if (max < num)
			max = num;
	}

	std::cout << "최대값은 - " << max;

	save("소스.cpp");
}






=================================================
소스.cpp2023-03-13 월요일 오후 12:09:35
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 13일 	월23		월23화56				(2주 1)
//-----------------------------------------------------------------------
// 많은 수의 자료를 다루는 - int
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <format>
#include <array>

#include "save.h"




// [문제] 파일 "int 천개"에 있는 int 1000개를 메모리에 저장하라
// int는 텍스트 형식으로 공백으로 분리되어 저장되어 있다.


//--------
int main()
//--------
{
	std::ifstream in{ "int 천개" };				

	std::array<int, 1000> a;			// 앞으로 int[] 사용하지 않는다

	for (int i = 0; i < 1000; i++)
		in >> a[i];

	// int a[]에 있는 값 중 가장 큰 값을 화면에 출력하라.
	auto p = max_element(a.begin(), a.end());

	std::cout << "최대값은 - " << *p << std::endl;

	save("소스.cpp");
}






//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 14일 	화56		월23화56				(2주 2)
//-----------------------------------------------------------------------
// 많은 수의 자료 다루기 - class
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <fstream>

#include "save.h"


class Dog {
	// 5byte로 끝낼 수 있지만 속도를 위해 8byte 저장
	// 빈 공간 패딩

	char c;
	int n;

public:
	Dog() {}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog)
	{
		return os << "글자 - " << dog.c << "숫자 - " << dog.n;
	}

	friend std::istream& operator>>(std::istream& is, Dog& dog) {
		is.read((char*)&dog, sizeof(Dog));

		return is;
	}
};

// [문제] Dog 1000 객체가 파일 "Dog 천마리"에 binary mode로 연 파일에
// write 함수로 메모리 그대로 기록되어 있다.
// Dog의 정보를 cout으로 화면에 출력하라.

//--------
int main()
//--------
{
	std::ifstream in{ "Dog 천마리", std::ios::binary };

	if (!in)
		return 0;

	Dog dog;
	int cnt{};
	while (in >> dog) {
		std::cout << dog << '\n';
		++cnt;
	}

	std::cout << "모두" << cnt << "개 객체를 읽음" << '\n';
	

	save("소스.cpp");
}




=================================================
소스.cpp2023-03-20 월요일 오전 10:33:43
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>

#include "save.h"




//--------
int main()
//--------
{
	// 여기에서 객체르 ㄹ생성 -> STACK에 생성
	std::array<int, 1'000'000> a;			// 4MB
	std::cout << sizeof(a) << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:41:16
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>

#include "save.h"




//--------
int main()
//--------
{
	std::array<int, 10'000'000> a;


	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:47:22
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리

#include "save.h"




//--------
int main()
//--------
{
	std::array<int, 250'000> a;

	// 마지막 100개 전에서 100개만 출력
	for (int num : a |
				std::views::drop(a.size() - 100) )
		std::cout << std::format("{:20}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:48:20
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"




//--------
int main()
//--------
{
	std::array<int, 250'000> a;
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a |
				std::views::drop(a.size() - 100) )
		std::cout << std::format("{:20}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:48:40
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"




//--------
int main()
//--------
{
	std::array<int, 250'000> a;
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a |
				std::views::drop(a.size() - 100) )
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:59:26
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계 - 1MB가 default(컴파일러가 코드 생성하지 않는것 주의)
// 더 큰 데이터 사용 - DATA와 Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"


std::array<int, 260'000> a;			// DATA segment

//--------
int main()
//--------
{
	
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a | std::views::drop(a.size() - 100) )	// syntatic suger
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 10:59:51
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계 - 1MB가 default(컴파일러가 코드 생성하지 않는것 주의)
// 더 큰 데이터 사용 - DATA와 Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"


std::array<int, 2'600'000> a;			// DATA segment

//--------
int main()
//--------
{
	
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a | std::views::drop(a.size() - 100) )	// syntatic suger
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 11:06:47
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계 - 1MB가 default(컴파일러가 코드 생성하지 않는것 주의)
// 더 큰 데이터 사용 - DATA와 Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"


std::array<int, 1'990'000'000/sizeof(int)> a;			// DATA segment

//--------
int main()
//--------
{
	
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a | std::views::drop(a.size() - 100) )	// syntatic suger
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 11:08:45
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계 - 1MB가 default(컴파일러가 코드 생성하지 않는것 주의)
// 더 큰 데이터 사용 - DATA와 Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"


std::array<int, 1'990'000'000/sizeof(int)> a;		// 약 214kM - 실행 파일의 크기

//--------
int main()
//--------
{
	
	iota(a.begin(), a.end(), 1);

	// 마지막 100개 전에서 100개만 출력
	for (int num : a | std::views::drop(a.size() - 100) )	// syntatic suger
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 11:14:27
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// STACK의 한계 - 1MB가 default(컴파일러가 코드 생성하지 않는것 주의)
// 더 큰 데이터 사용 - DATA와 Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <format>
#include <ranges>			// c++20라이브러리
#include <numeric>

#include "save.h"


std::array<int, 1'990'000'000 / sizeof(int)> a{ 1 };		// 약 1.9gB - 실행 파일의 크기

//--------
int main()
//--------
{
	
	// 마지막 100개 전에서 100개만 출력
	for (int num : a | 
		std::views::take(100) )	// syntatic suger
		std::cout << std::format("{:10}", num);		// STACK 오버플로
	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오전 11:53:42
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <numeric>
#include <ranges>

#include "save.h"

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 메모리를 생성하라
// 값을 1부터 시작하는 정수로 채워나가라.
// 합계를 화면에 출력하다
// 예) 10을 입력
// -> int 10개 공간확보 ->  1 2 3 4 5 6 7 8 9 10
// 합계는 55

//--------
int main()
//--------
{
	std::cout << "int를 몇 개 만들까요? ";
	int num;
	std::cin >> num;

	int* p = new int[num] {};
	for (int i = 0; i < num; ++i)
		std::cout << p[i] << " ";

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-20 월요일 오후 12:12:24
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 20일 	월23		월23화56				(3주 1)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <numeric>

#include "save.h"

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 메모리를 생성하라
// 값을 1부터 시작하는 정수로 채워나가라.
// 합계를 화면에 출력하다
// 예) 10을 입력
// -> int 10개 공간확보 ->  1 2 3 4 5 6 7 8 9 10
// 합계는 55

//--------
int main()
//--------
{
	//int count{};
	//while (true) {
		int num{ 200'000'000 };			// 800MB
		int* p = new int[num] {};
		std::iota(p, p + num, 1);

		long long sum{};
		for (int i = 0; i < num; i++)
			sum += p[i];

	//	std::cout << ++count << "번 실행 - " << sum << std::endl;

		delete[] p;
	//}

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 1:37:32
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <numeric>

#include "save.h"

// C++ 컴파일러가 값을 결정할 수 있는 순간
// 1. compile-time	- array<int, 100>
// 2. run-time		- new int[100]

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 메모리를 생성하라
// 값을 1부터 시작하는 정수로 채워나가라.
// 합계를 화면에 출력하다
// 예) 10을 입력
// -> int 10개 공간확보 ->  1 2 3 4 5 6 7 8 9 10
// 합계는 55

//--------
int main()
//--------
{
	int count{};
	while (true) {
		int num{ 200'000'000 };			// 800MB
		int* p = new int[num] {};
		
		// 예외가 발생시 아래의 delete[] p;가 불려지지않아 메모리가 쌓임

		std::iota(p, p + num, 1);
		long long sum{};
		for (int i = 0; i < num; i++)
			sum += p[i];

		std::cout << ++count << "번 실행 - " << sum << std::endl;

		delete[] p;
		break;
	}

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 1:40:05
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <numeric>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "제거" << std::endl; }
};

//--------
int main()
//--------
{
	
	save("소스.cpp");

	Dog* p = new Dog;

	// 이 사이 코딩

	delete p;
}



=================================================
소스.cpp2023-03-21 화요일 오후 1:40:12
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <numeric>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "제거" << std::endl; }
};

//--------
int main()
//--------
{
	
	save("소스.cpp");

	Dog* p = new Dog;

	// 이 사이 코딩
	throw 1;

	delete p;
}



=================================================
소스.cpp2023-03-21 화요일 오후 1:43:21
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <numeric>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "제거" << std::endl; }
};

void f()
{
	Dog* p = new Dog;

	// 이 사이 코딩
	throw 1;

	delete p;
}

//--------
int main()
//--------
{
	save("소스.cpp");

	try {
		f();
	}
	catch (int) {
		std::cout << "예외를 잡았다" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 1:48:05
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "제거" << std::endl; }
};

void f()
{
	// 앞으로 쓰지 말아야 할것 
	// 1. []를 쓰지 말 것
	// 2. *(raw pointer)를 쓰지 말 것 -> smart pointer를 사용하라.
	std::unique_ptr<Dog> p{ new Dog };		// RAII 자원을 할당하고 해제하는걸 자동화하는 기능

	throw 1;
}

//--------
int main()
//--------
{
	save("소스.cpp");

	try {
		f();
	}
	catch (int) {
		std::cout << "예외를 잡았다" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 1:49:52
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "소멸" << std::endl; }
};

void f()
{
	// 앞으로 쓰지 말아야 할것 
	// 1. []를 쓰지 말 것
	// 2. *(raw pointer)를 쓰지 말 것 -> smart pointer를 사용하라.

	std::unique_ptr<Dog> p{ new Dog };		// RAII 자원을 할당하고 해제하는걸 자동화하는 기능

	throw 1;		// 예외 발생
}

//--------
int main()
//--------
{
	save("소스.cpp");

	try {
		f();
	}
	catch (int) {
		std::cout << "예외를 잡았다" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 1:50:16
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "소멸" << std::endl; }
};

void f()
{
	// 앞으로 쓰지 말아야 할것 
	// 1. []를 쓰지 말 것
	// 2. *(raw pointer)를 쓰지 말 것 -> smart pointer를 사용하라.

	std::unique_ptr<Dog[]> p{new Dog[5]};		// RAII 자원을 할당하고 해제하는걸 자동화하는 기능

	throw 1;		// 예외 발생
}

//--------
int main()
//--------
{
	save("소스.cpp");

	try {
		f();
	}
	catch (int) {
		std::cout << "예외를 잡았다" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 1:52:43
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"

class Dog {
public:
	Dog() { std::cout << "생성" << std::endl; }
	~Dog() { std::cout << "소멸" << std::endl; }
};

void f()
{
	// 앞으로 쓰지 말아야 할것 
	// 1. []를 쓰지 말 것
	// 2. *(raw pointer)를 쓰지 말 것 -> smart pointer를 사용하라.
	// 예외가 발생하더라도  STACK에 생성된 지역객체가 소멸됨을 보증한다.
	// -> stack unwinding (스택 되감기)

	std::unique_ptr<Dog[]> p{new Dog[5]};		// RAII 

	throw 1;		// 예외 발생
}

//--------
int main()
//--------
{
	save("소스.cpp");

	try {
		f();
	}
	catch (int) {
		std::cout << "예외를 잡았다" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 2:00:14
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"




//--------
int main()
//--------
{
	save("소스.cpp");

	int count;
	while (true) {
		new char[1'000'000'000];
		std::cout << count << " 할당 성공" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 2:00:57
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"




//--------
int main()
//--------
{
	save("소스.cpp");

	int count;
	while (true) {
		new char[1'000'000'000];
		std::cout << ++count << " 할당 성공" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 2:02:44
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 더 큰 데이터 사용 - Free Store(HEAP)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <memory>

#include "save.h"




//--------
int main()
//--------
{
	save("소스.cpp");

	int count{};
	while (true) {
		try {
			new char[1'000'000'000];
		}
		catch (std::exception& e) {
			std::cout << e.what() << std::endl;
			return 0;
		}
		std::cout << ++count << " 할당 성공" << std::endl;
	}

}



=================================================
소스.cpp2023-03-21 화요일 오후 2:19:22
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 파일 읽고 쓰기 예제
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>

#include "save.h"

// [문제] "소스.cpp"를 읽어 소문자를 대문자로 변환하여
// "소스대문자.cpp"에 저장하라

//--------
int main()
//--------
{
	// 1. 파일을 읽기 모드로 연다
	std::ifstream in{ "소스.cpp" };
	// 파일이 열렸는지 확인한다
	if (!in) {
		std::cout << "파일 열기 실패" << std::endl;
		
	}
	// 2. 파일을 쓰기 모드로 연다
	std::ofstream out{ "소스대문자.cpp" };

	// 3. 읽기파일에서 한글자 읽는다
	char c;
	in >> std::noskipws;
	while (in >> c) {
		// 글자가 소문자라면 대문자로 바꾼다
		if (islower(c))
			c = toupper(c);

		// 쓰기파일에 글자를 저장한다
		out << c;
	}

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 2:21:01
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 파일 읽고 쓰기 예제
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>

#include "save.h"

// [문제] "소스.cpp"를 읽어 소문자를 대문자로 변환하여
// "소스대문자.cpp"에 저장하라

//--------
int main()
//--------
{
	// 1. 파일을 읽기 모드로 연다
	std::ifstream in{ "소스.cpp" };
	// 파일이 열렸는지 확인한다
	if (!in) {
		std::cout << "파일 열기 실패" << std::endl;
		return 0;
	}

	// 2. 파일을 쓰기 모드로 연다
	std::ofstream out{ "소스대문자.cpp" };

	// 3. 읽기파일에서 한글자 읽는다
	char c;
	in >> std::noskipws;

	while (in >> c) {
		// 글자가 소문자라면 대문자로 바꾼다
		c = toupper(c);

		// 쓰기파일에 글자를 저장한다
		std::cout << c;
	}

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 2:26:32
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 파일 읽고 쓰기 예제
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <algorithm>

#include "save.h"

// [문제] "소스.cpp"를 읽어 소문자를 대문자로 변환하여
// "소스대문자.cpp"에 저장하라

//--------
int main()
//--------
{
	std::ifstream in{ "소스.cpp" };

	std::ofstream out{ "소스대문자.cpp" };

	std::transform(std::istreambuf_iterator<char>{in}, {},
		std::ostreambuf_iterator<char>{out},
		[](char c) {
			return c = toupper(c);
		} );

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 2:42:00
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 파일 읽고 쓰기 예제
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <fstream>
#include <algorithm>

#include "save.h"

// [문제] "소스.cpp"에 있는 숫자를 '*'로 변환하여 화면에 출력하라

//--------
int main()
//--------
{
	std::ifstream in{ "소스.cpp" };

	std::transform(std::istreambuf_iterator<char>{in}, {},
		std::ostreambuf_iterator<char> {std::cout},
		[](char c) {
			return isdigit(c) ? '*' : c;
		} );

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:07:16
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

int 어떻게(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;

}

//--------
int main()
//--------
{
	for (int num : numbers)
		num = uid(dre);

	// 오름차순 정렬 - qsort 와 sort
	std::qsort((void*) &numbers, numbers.size(), sizeof(int), 어떻게);				// generic 함수 (자료형이 상관없는 함수)

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	std::cout << std::endl;
	std::cout << "qsort 네번째 인자 타입 - " << typeid(어떻게).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:07:43
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

int 어떻게(const void* a, const void* b)
{
	return *(int*)a > *(int*)b;

}

//--------
int main()
//--------
{
	for (int num : numbers)
		num = uid(dre);

	// 오름차순 정렬 - qsort 와 sort
	std::qsort((void*) &numbers, numbers.size(), sizeof(int), 어떻게);				// generic 함수 (자료형이 상관없는 함수)

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	std::cout << std::endl;
	std::cout << "qsort 네번째 인자 타입 - " << typeid(어떻게).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:09:56
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

int 어떻게(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;

}

//--------
int main()
//--------
{
	for (int num : numbers)
		num = uid(dre);

	int (*comp)(const void*, const void*) = 어떻게;
	std::qsort((void*) &numbers, numbers.size(), sizeof(int), comp);				// generic 함수 (자료형이 상관없는 함수)

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	std::cout << std::endl;
	std::cout << "qsort 네번째 인자 타입 - " << typeid(어떻게).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:11:52
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

int 어떻게(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;

}

//--------
int main()
//--------
{
	for (int& num : numbers)
		num = uid(dre);

	std::qsort((void*) &numbers, numbers.size(), sizeof(int), 어떻게);				// generic 함수 (자료형이 상관없는 함수)

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:13:43
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

int 어떻게(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;

}

//--------
int main()
//--------
{
	for (int& num : numbers)
		num = uid(dre);

	// 오름차운 정렬 - qsort( c ) 와 sort( c++ )
	std::ranges::sort(numbers);

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-21 화요일 오후 3:15:37
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 21일 	화23		월23화56				(3주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

bool 어떻게( int a, int b )
{
	return a > b;
}

//--------
int main()
//--------
{
	for (int& num : numbers)
		num = uid(dre);

	// 오름차운 정렬 - qsort( c ) 와 sort( c++ )
	sort(numbers.begin(), numbers.end(), 어떻게 );

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);

	
	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 10:44:08
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

bool 어떻게( int a, int b )
{
	return a > b;
}

class Dog {
public:
	bool operator()(int a, int b) { 
		return a < b; 
	}
};

//--------
int main()
//--------
{
	Dog dog;

	std::cout << std::boolalpha << dog(200, 100) << std::endl;;


	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 10:44:22
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };

bool 어떻게( int a, int b )
{
	return a > b;
}

class Dog {
public:
	bool operator()(int a, int b) { 
		return a < b; 
	}
};

//--------
int main()
//--------
{
	Dog dog;

	std::cout << std::boolalpha << dog.operator()(200, 100) << std::endl;;


	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 10:53:46
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"

// [문제] int 10'000'000 개를 랜덤값으로 채운다.
// 오름차순으로 정렬하라.
// 끝에 100개만 화면에 출력하라

std::array <int, 10'000'000> numbers;
std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 10'000'000 };



//--------
int main()
//--------
{
	for (int& num : numbers)
		num = uid(dre);

	sort(numbers.begin(), numbers.end(), [](int a, int b) {			// Callable 함수
		return a > b;
		});

	for (int num : numbers |
		std::views::drop(numbers.size() - 100)
		)
		std::cout << std::format("{:10}", num);


	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 10:57:21
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"



//--------
int main()
//--------
{
	int n;

	std::cout << typeid(n).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 10:59:52
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"



//--------
int main()
//--------
{
	// sizeof(), addressof(), typeid()


	std::cout << typeid([]() {
		std::cout << "람다 함수" << std::endl;
	}).name() << std::endl;


	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 11:02:41
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"



//--------
int main()
//--------
{
	// sizeof(), addressof(), typeid()


	auto 람다 = []() {
		std::cout << "람다 함수" << std::endl;
		};

	std::cout << typeid(람다).name() << std::endl;

	class Dog {};
	Dog dog;
	std::cout << typeid(dog).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 11:12:25
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include "save.h"



//--------
int main()
//--------
{
	std::cout << typeid(main).name() << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 11:42:16
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//  1. 함수(함수 포인터)									fptr
//  2. 함수 객체(함수호출 연산자()를 오버로딩한 클래스)		functor
//  3. 람다(이름없는 함수)									lambda
//  4. 멤버함수 포인터										mfptr
// 
//  전체를 추상화 한(대표하는) 클래스 -> function
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"



//--------
int main()
//--------
{
	std::function<int(void)> f = main;
	std::cout << sizeof(f) << std::endl;

	save("소스.cpp");
}



=================================================
소스.cpp2023-03-27 월요일 오전 11:50:36
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//  1. 함수(함수 포인터)									fptr
//  2. 함수 객체(함수호출 연산자()를 오버로딩한 클래스)		functor
//  3. 람다(이름없는 함수)									lambda
//  4. 멤버함수 포인터										mfptr
// 
//  전체를 추상화 한(대표하는) 클래스 -> function
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"

// [문제] 게임의 버튼에 할당된 기능르 바꾼다

void jump()
{
	std::cout << "점프" << std::endl;
}

void slide()
{
	std::cout << "슬라이드" << std::endl;
}


//--------
int main()
//--------
{
	save("소스.cpp");

	while (true) {
		// 키설명 : a, l 점프/슬라이드, o 옵션, q 끝내기
		std::cout << "키를 누르시오(a, l, o, q): " << std::endl;
		char c;
		std::cin >> c;

		switch (c) {
		case 'a':
			jump();
			break;
		case 'l':
			slide();
			break;
		case 'o':
			break;
		case 'q':
			return 0;
		}

	}
}


=================================================
소스.cpp2023-03-27 월요일 오전 11:59:22
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//  1. 함수(함수 포인터)									fptr
//  2. 함수 객체(함수호출 연산자()를 오버로딩한 클래스)		functor
//  3. 람다(이름없는 함수)									lambda
//  4. 멤버함수 포인터										mfptr
// 
//  전체를 추상화 한(대표하는) 클래스 -> function
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"

// [문제] 게임의 버튼에 할당된 기능르 바꾼다

void jump()
{
	std::cout << "점프" << std::endl;
}

void slide()
{
	std::cout << "슬라이드" << std::endl;
}


//--------
int main()
//--------
{
	save("소스.cpp");

	// std::function<void(void)> akey = jump;
	void (*akey)(void) = jump;
	auto lkey = slide;

	while (true) {
		// 키설명 : a, l 점프/슬라이드, o 옵션, q 끝내기
		std::cout << "키를 누르시오(a, l, o, q): " << std::endl;
		char c;
		std::cin >> c;

		switch (c) {
		case 'a':
			akey();
			break;
		case 'l':
			lkey();
			break;
		case 'o':
			if (akey == jump) {
				akey = slide;
				lkey = jump;
			}
			else {
				akey = jump;
				lkey = slide;
			}
			break;
		case 'q':
			return 0;
		}

	}
}


=================================================
소스.cpp2023-03-27 월요일 오전 11:59:40
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 27일 	월23		월23화56				(4주 1)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//  1. 함수(함수 포인터)									fptr
//  2. 함수 객체(함수호출 연산자()를 오버로딩한 클래스)		functor
//  3. 람다(이름없는 함수)									lambda
//  4. 멤버함수 포인터										mfptr
// 
//  전체를 추상화 한(대표하는) 클래스 -> function
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"

// [문제] 게임의 버튼에 할당된 기능르 바꾼다

void jump()
{
	std::cout << "점프" << std::endl;
}

void slide()
{
	std::cout << "슬라이드" << std::endl;
}


//--------
int main()
//--------
{
	save("소스.cpp");

	// std::function<void(void)> akey = jump;
	void (*akey)(void) = jump;
	auto lkey = slide;

	while (true) {
		// 키설명 : a, l 점프/슬라이드, o 옵션, q 끝내기
		std::cout << "키를 누르시오(a, l, o, q): " << std::endl;
		char c;
		std::cin >> c;

		switch (c) {
		case 'a':
			akey();
			break;
		case 'l':
			lkey();
			break;
		case 'o':
			if (akey == jump) {
				akey = slide;
				lkey = jump;
			}
			else {
				akey = jump;
				lkey = slide;
			}
			break;
		case 'q':
			return 0;
		}

	}
}


=================================================
소스.cpp2023-03-28 화요일 오후 1:38:08
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <string>
#include <format>
#include <ranges>

#include "save.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 0, 100'000 };
std::uniform_int_distribution uidLen{ 1, 60 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };

class Dog {
	int num;
	std::string name;

public:
	Dog() {
		// 숫자 [0, 100'000], name 은 [1, 60글자]
		num = uidNum(dre);
		int len = uidLen(dre);
		for (int i = 0; i < 10; ++i) {
			name += uidName(dre);
		}
	}

	void show() const {
		std::cout << std::format("{:8} - {}", num, name) << std::endl;
	}

	int getNum() {
		return num;
	}
};

// [문제] Dog 객체 100만개를 생성하라
// num기준 오름차순으로 정렬하라
// 앞에서부터 100개만 출력하라

std::array<Dog, 100'000> dogs;

//--------
int main()
//--------
{
	//std::sort(dogs.begin(), dogs.end(), []);
	std::cout << sizeof(Dog) << std::endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 1:45:35
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// 정렬(sort) - Callable type(호출가능타입)
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <random>
#include <string>
#include <format>
#include <ranges>
#include <algorithm>

#include "save.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 0, 100'000 };
std::uniform_int_distribution uidLen{ 1, 60 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };

class Dog {
	int num;
	std::string name;

public:
	Dog() {
		// 숫자 [0, 100'000], name 은 [1, 60글자]
		num = uidNum(dre);
		int len = uidLen(dre);
		for (int i = 0; i < 10; ++i) {
			name += uidName(dre);
		}
	}

	void show() const {
		std::cout << std::format("{:8} - {}", num, name) << std::endl;
	}

	int getNum() const {
		return num;
	}
};

// [문제] Dog 객체 100만개를 생성하라
// num기준 오름차순으로 정렬하라
// 앞에서부터 100개만 출력하라

std::array<Dog, 100'000> dogs;

//--------
int main()
//--------
{
	std::sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.getNum() < b.getNum();
		});

	for (int i = 0; i < 100; ++i)
		dogs[i].show();

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 1:53:05
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <string>

#include "save.h"

using namespace std;

//--------
int main()
//--------
{
	string a{ "123" };
	// 구성 데이터 : size_t num(8byte), char* p(8byte), DATA 동적할당(16byte 이하면 동적할당 X)

	cout << sizeof(a) << endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 2:10:57
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <string>

#include "save.h"

using namespace std;

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)

public:
	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
	}

	~String() {
		delete[] p;
	}


	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}
};


//--------
int main()
//--------
{
	String a{ "123" };
	// 구성 데이터 : size_t num(8byte), char* p(8byte), DATA 동적할당(16byte 이하면 동적할당 X)

	cout << a << endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 2:51:19
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <string>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.


class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}



	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		cout << "[" << id << "] - " << msg << ", 개수: " << len
			<< ", 주소: " << (void*)p << endl;
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	String a{ "123" };
	String b{ "4567890" };
	String c = a + b;

	cout << a << endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 2:53:13
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <string>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰{

};

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}



	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	관찰 = true;

	String a{ "123" };
	String b{ "4567890" };
	String c = a + b;
	
	cout << a << endl;
	

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 3:05:58
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <string>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰{

};

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	// 복사생성자 + 복사할당연산자  세트
	String(const String& other) : len{ other.len } {
		p = new char[len];
		memcpy(p, other.p, len);
		print("복사생성");
	}

	String& operator=(const String& other) {
		if (this == &other)
			return *this;
		delete[] p;

		len = other.len;
		p = new char[len];
		memcpy(p, other.p, len);
		
		print("복사할당연산자");
		return *this;
	}



	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}

	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	관찰 = true;

	String a{ "123" };
	String b{ "4567890" };
	String c;
	c = a + b;
	
	cout << c << endl;
	

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 3:10:25
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰;

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	// 복사생성자 + 복사할당연산자  세트
	String(const String& other) : len{ other.len } {
		p = new char[len];
		memcpy(p, other.p, len);
		print("복사생성");
	}

	String& operator=(const String& other) {
		if (this == &other)
			return *this;
		delete[] p;

		len = other.len;
		p = new char[len];
		memcpy(p, other.p, len);
		
		print("복사할당연산자");
		return *this;
	}



	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}

	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	array<String, 5> news{
	"유재석이", "목숨", "걸고", "만든", "걸그룹.."
	};

	for (String s : news)
		cout << s << endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 3:10:55
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰;

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	// 복사생성자 + 복사할당연산자  세트
	String(const String& other) : len{ other.len } {
		p = new char[len];
		memcpy(p, other.p, len);
		print("복사생성");
	}

	String& operator=(const String& other) {
		if (this == &other)
			return *this;
		delete[] p;

		len = other.len;
		p = new char[len];
		memcpy(p, other.p, len);
		
		print("복사할당연산자");
		return *this;
	}



	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}

	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	관찰 = true;
	array<String, 5> news{
	"유재석이", "목숨", "걸고", "만든", "걸그룹.."
	};

	for (String s : news)
		cout << s << endl;

	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 3:11:41
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰;

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	// 복사생성자 + 복사할당연산자  세트
	String(const String& other) : len{ other.len } {
		p = new char[len];
		memcpy(p, other.p, len);
		print("복사생성");
	}

	String& operator=(const String& other) {
		if (this == &other)
			return *this;
		delete[] p;

		len = other.len;
		p = new char[len];
		memcpy(p, other.p, len);
		
		print("복사할당연산자");
		return *this;
	}



	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}

	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	array<String, 5> news{
	"유재석이", "목숨", "걸고", "만든", "걸그룹.."
	};

	관찰 = true;
	for (String s : news)
		cout << s << endl;
	관찰 = false;
	save("소스.cpp");
}


=================================================
소스.cpp2023-03-28 화요일 오후 3:12:17
=================================================
//-----------------------------------------------------------------------
// 2023 1학기 STL 3월 28일 	화56		월23화56				(4주 2)
//-----------------------------------------------------------------------
// C++ 클래스 복습 - String 클래스를 만든다
// 앞으로 String 클래스를 STL 컨테이너로 발전시킨다
//-----------------------------------------------------------------------
// 코딩환경 - VS Release/x64, C++표준 - lastest, SDL/아니요
//-----------------------------------------------------------------------
#include <iostream>

#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

// [문제] String을 코딩하라
// 모든 special 함수에 관찰 메시지를 추가하라
// 생성시 객체에 고유번호를 부여하라.

bool 관찰;

class String {
	size_t len{};
	char* p{};			// unique_ptr<char> p 로 바꿔서 코딩해볼것 (고난이도)
	size_t id = ++sid;

	static size_t sid;

public:
	String() {
		print("디폴트 생성");
	};

	String(const char* s) : len{ strlen(s) } {
		p = new char[len];
		memcpy(p, s, len);		// DMA
		print("생성(char*)");
	}

	~String() {
		delete[] p;
		print("소멸자");
	}

	// 복사생성자 + 복사할당연산자  세트
	String(const String& other) : len{ other.len } {
		p = new char[len];
		memcpy(p, other.p, len);
		print("복사생성");
	}

	String& operator=(const String& other) {
		if (this == &other)
			return *this;
		delete[] p;

		len = other.len;
		p = new char[len];
		memcpy(p, other.p, len);
		
		print("복사할당연산자");
		return *this;
	}



	String operator+(const String& rhs) const {
		String temp;
		temp.len = len + rhs.len;
		temp.p = new char[temp.len];
		memcpy(temp.p, p, len);
		memcpy(temp.p + len, rhs.p, rhs.len);
		return temp;
	}

	friend ostream& operator<<(ostream& os, const String& s) {
		for (int i = 0; i < s.len; ++i)
			os << s.p[i];
		return os;
	}

	void print(const char* msg) const {
		if (관찰) {
			cout << "[" << id << "] - " << msg << ", 개수: " << len
				<< ", 주소: " << (void*)p << endl;
		}
	}
};

size_t String::sid{ 0 };

//--------
int main()
//--------
{
	array<String, 5> news{
	"유재석이", "목숨", "걸고", "만든", "걸그룹.."
	};

	관찰 = true;
	for (String& s : news)
		cout << s << endl;
	관찰 = false;
	save("소스.cpp");
}